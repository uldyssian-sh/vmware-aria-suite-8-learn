name: Security Scan

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install Node.js dependencies
      run: |
        if [ -f package.json ]; then npm install; fi

    - name: Python Security Scan - Safety
      run: |
        if [ -f requirements.txt ]; then
          safety check --json --output safety-report.json || true
        fi

    - name: Python Security Scan - Bandit
      run: |
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | head -20 | xargs bandit -f json -o bandit-report.json || true

    - name: Node.js Security Scan
      run: |
        if [ -f package.json ]; then
          npm audit --audit-level=moderate --json > npm-audit.json || true
        fi

    - name: Go Security Scan
      run: |
        if [ -f go.mod ]; then
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./... || true
        fi

    - name: Semgrep Security Scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          *-report.json
        retention-days: 30
        if-no-files-found: ignore

    - name: Security Summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Status | Issues |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ -f safety-report.json ]; then
          SAFETY_ISSUES=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
          echo "| Safety (Python) | ✅ | $SAFETY_ISSUES |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f bandit-report.json ]; then
          BANDIT_ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
          echo "| Bandit (Python) | ✅ | $BANDIT_ISSUES |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f npm-audit.json ]; then
          NPM_ISSUES=$(jq '.metadata.vulnerabilities.total' npm-audit.json 2>/dev/null || echo "0")
          echo "| NPM Audit | ✅ | $NPM_ISSUES |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f gosec-report.json ]; then
          GOSEC_ISSUES=$(jq '.Issues | length' gosec-report.json 2>/dev/null || echo "0")
          echo "| Gosec (Go) | ✅ | $GOSEC_ISSUES |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f semgrep-report.json ]; then
          SEMGREP_ISSUES=$(jq '.results | length' semgrep-report.json 2>/dev/null || echo "0")
          echo "| Semgrep | ✅ | $SEMGREP_ISSUES |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Security scan completed successfully" >> $GITHUB_STEP_SUMMARY