version: '3.8'

# VMware Aria Suite Development Environment
# Docker Compose configuration for local development and testing

services:
  # Aria Operations Simulator
  aria-operations-sim:
    image: nginx:alpine
    container_name: aria-ops-simulator
    ports:
      - "8443:443"
      - "8080:80"
    volumes:
      - ./nginx/aria-ops.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./mock-api:/usr/share/nginx/html/api
    environment:
      - NGINX_HOST=aria-ops.lab.local
      - NGINX_PORT=443
    networks:
      - aria-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aria-ops.rule=Host(`aria-ops.lab.local`)"
      - "traefik.http.routers.aria-ops.tls=true"

  # Aria Automation Simulator  
  aria-automation-sim:
    image: nginx:alpine
    container_name: aria-auto-simulator
    ports:
      - "9443:443"
      - "9080:80"
    volumes:
      - ./nginx/aria-auto.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./mock-api:/usr/share/nginx/html/api
    environment:
      - NGINX_HOST=aria-automation.lab.local
      - NGINX_PORT=443
    networks:
      - aria-network
    restart: unless-stopped

  # PostgreSQL Database for development
  postgres:
    image: postgres:15-alpine
    container_name: aria-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aria_dev}
      POSTGRES_USER: ${POSTGRES_USER:-aria_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - aria-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aria_user -d aria_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: aria-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - aria-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for logging and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: aria-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - aria-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: aria-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    networks:
      - aria-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: aria-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aria-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: aria-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - aria-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: aria-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-changeme}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - aria-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Traefik reverse proxy
  traefik:
    image: traefik:v3.0
    container_name: aria-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=admin@lab.local"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - aria-network
    restart: unless-stopped

  # Development API server
  api-server:
    build:
      context: ./api-server
      dockerfile: Dockerfile
    container_name: aria-api-server
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aria_user}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-aria_dev}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-changeme}
    volumes:
      - ./api-server:/app
      - /app/node_modules
    networks:
      - aria-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.aria.lab.local`)"

  # Web frontend
  web-frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
    container_name: aria-web-frontend
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://api.aria.lab.local
      - REACT_APP_ENV=development
    volumes:
      - ./web-frontend:/app
      - /app/node_modules
    networks:
      - aria-network
    depends_on:
      - api-server
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`web.aria.lab.local`)"

  # Testing environment
  test-runner:
    build:
      context: ./test-environment
      dockerfile: Dockerfile
    container_name: aria-test-runner
    environment:
      - TEST_ENV=docker
      - API_BASE_URL=http://api-server:4000
    volumes:
      - ./tests:/tests
      - ./reports:/reports
    networks:
      - aria-network
    depends_on:
      - api-server
      - postgres
    profiles:
      - testing

networks:
  aria-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local
  traefik_data:
    driver: local